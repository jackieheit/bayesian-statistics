---
title: "PSYC 529 R Homework 5"
author: 
- name: "Jacqueline Heitmann"
  affiliation: "25562334"
format: 
  typst: 
    section-numbering: 1.1.a
    keep-typ: true
    include-before-body: 
    - text: |
        #show heading: head => [
          #pagebreak(weak: true)
          #head
          ]
---

```{r}
library(tidyverse) # for general use
library(rstan) # for interacting with Stan
library(bayesplot) # for plotting

Zener = read.csv("../data/Zener_data.csv") # import the data
```
1(a) (15 points) Create a copy of the Stan code we used in class today (give it a slightly different
name) and modify it so that you can pass in the prior hyperparameters (a and b) as part
of the data.

(b) (21/2 points) Download and import the long-format Zener card data in the file Zener data.csv
(which is on Canvas). Create a data frame called my Zener that contains only your personal data. Hint: Filter the data frame by participant ID; see the .Rmd file we used in
class.

Put the relevant data into a list that you will give to Stan in the next step. Include the
following prior hyperparameters: a = 10.6, b = 39.4. These give a beta prior distribution
that is rather strongly concentrated around θ = 0.2 (the value of θ if we just guess).

```{r}
my_Zener = Zener %>% filter(id == "jh3487") # select my data
my_Zener %>% head() # show the first few rows

# Make a list of the data for the stan file:
stan_data_list = list(N = nrow(my_Zener), # number of trials (i.e. rows in the data frame)
                      y = my_Zener$correct,
                      a = 10.6,
                      b = 39.4) # 1 = correct, 0 = wrong
```
(c) (21/2 points) Sample from the model using the stan function. Use the same number of
chains, burn-in period etc. as in the in-class demo.

#### Fit the model, i.e. do MCMC sampling
```{r}
bern_beta_fit = stan(file = "../stan-files/Bernoulli_beta_hw5.stan",
                     model_name = "basic_Zener_card_model",
                     data = stan_data_list,
                     chains = 4,
                     iter = 5000,
                     warmup = 200)
```

(d) (5 points) Make a trace plot for θ using the mcmc trace function from the bayesplot
package. Does it look like we have convergence?

```{r}
mcmc_trace(bern_beta_fit,
           pars = c("theta"))
```
Yes.

(e) (21/2 points) Use print to obtain basic information about your fitted model. What is the
potential scale reduction factor, i.e. Rhat. Is it close to 1 (indicating convergence)?

```{r}
print(bern_beta_fit, pars = c("theta"))
```

(f) (21/2 points) Use the mcmc hist function from the bayesplot package to make a histogram
of the posterior distribution.

```{r}
mcmc_hist(bern_beta_fit,
          pars = c("theta")) +
  xlim(c(0, 1)) # make sure that the x-axis shows the full range of possible theta values (0 to 1)
```
EXTRA: 

Plot posterior distribution with credible interval (uses the bayesplot package)
```{r}
mcmc_areas(bern_beta_fit,
           pars = c("theta"),
           prob = 0.95) + # 95% credible interval
  xlim(c(0, 1)) # make sure that the x-axis shows the full range of possible theta values (0 to 1)
```

Plot credible interval for theta (uses the bayesplot package)
```{r}
mcmc_intervals(bern_beta_fit, 
               pars = c("theta"),
               prob = 0.5, # inner 50% credible interval
               prob_outer = 0.95) # outer 95% credible interval
```


2(a) (15 points) Copy the Stan file from the previous question (call it something different) and
modify it to use a binomial likelihood instead of a Bernoulli one. Instead of passing in y
(a sequence of data points) as data, you will instead pass in z (the number of “successes”,
in this case correct trials).
Hint: The Stan documentation for the binomial likelihood can be found here:
https://mc-stan.org/docs/2_21/functions-reference/binomial-distribution.html

(b) (5 points) Package the relevant data into a list and sample from the Stan model. Use the
same number of chains, iterations etc. as before. Also use the same posterior distribution
hyperparameters.

```{r}
# Make a new list of the data for the stan file :
stan_data_list_2 = list(N = nrow(my_Zener), # number of trials (i.e. rows in the data frame)
                      z = sum(my_Zener$correct), # Total number of successes (1 = correct, 0 = wrong)
                      a = 10.6,
                      b = 39.4) # 1 = correct, 0 = wrong

stan_data_list_2
```

```{r}
binom_beta_fit = stan(file = "../stan-files/Bernoulli_beta_hw5_Q2.stan",
                     model_name = "basic_Zener_card_model_binom",
                     data = stan_data_list_2,
                     chains = 4,
                     iter = 5000,
                     warmup = 200)
```


(c) (5 points) Check that your chains have converged using traceplots (use mcmc trace) and
Rhat (use print).'

```{r}
mcmc_trace(binom_beta_fit,
           pars = c("theta"))
```

(d) (5 points) Use print to obtain the posterior mean, standard deviation, and quantiles of
the fitted model. Compare them to your results from the previous problem? Are they
substantially the same (except maybe for tiny bit of approximation error)?

3. Now we will tackle the word recognition memory data. This model will use a binomial likelihood
the same as the last one, but this time there will be a different parameter (θ) for each trial type:
θ1 = p(say “yes” on memorized trials)
θ2 = p(say “yes” on related/unmemorized trials)
θ3 = p(say “yes” on unrelated/memorized trials)
Give each of these three θ parameters a beta(4, 4) prior distribution.

(a) (20 points) Create a Stan file called triple binomial beta.stan that implements this
model. Call the three parameters theta1, theta2, and theta3. Use similar names for the
data variables.
Hint: Use your Stan code from the previous problem as a starting point.

(b) (5 points) Put the relevant data (from you specifically) into a list to give as input to Stan.
Sample from the model using Stan, with the same number of chains, burn-in period etc.
as before. Note: The relevant data file is: word memory data summarized.csv. You can
find it on Canvas. Your data will be in three adjacent rows (look for your ID in the relevant
column).

(c) (5 points) Check that your chains have converged using traceplots (one for each θ parameter; use mcmc trace) and Rhat (use print).

(d) (5 points) What is your “best guess” (in the sense of posterior mean) for the probability
of saying “yes” for each trial type? Does it look you are more likely to say “yes” to an
unmemorized word if it is related than if it is unrelated? Hint: You can use the output
of print.

(e) (5 points) Use the mcmc intervals function from the bayesplot package to plot 95%
credible intervals for the three θ parameters.
